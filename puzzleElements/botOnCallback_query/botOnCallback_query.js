module.exports = (
    bot,
    receivingSticker,
    startGame,
    counter,
    againOptions,
    answerStore,
    chats
) => {
    const mainKeyboard = [
        [
            {
                text: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
                callback_data: 'info'
            }
        ],
        [
            {
                text: '–¢–æ–ø –∫–Ω–∏–≥',
                callback_data: 'top'
            }
        ],
        [
            {
                text: '–ò–≥—Ä–∞',
                callback_data: 'game'
            }
        ],
        [
            {
                text: 'FaQ',
                callback_data: 'FaQ'
            }
        ],
    ]

    const faqKeyboard = [
        [
            {
                text: '–í–æ–ø—Ä–æ—Å1',
                callback_data: 'faq_1'
            }
        ],
        [
            {
                text: '–í–æ–ø—Ä–æ—Å2',
                callback_data: 'faq_2'
            }
        ],
        [
            {
                text: '–í–æ–ø—Ä–æ—Å3',
                callback_data: 'faq_3'
            }
        ],
        [
            {
                text: '–ù–∞–∑–∞–¥',
                callback_data: 'start'
            }
        ],
    ]

    const answers = [
        {name: "faq_1", answer: "–û—Ç–≤–µ—Ç1"},
        {name: "faq_2", answer: "–û—Ç–≤–µ—Ç2"},
        {name: "faq_3", answer: "–û—Ç–≤–µ—Ç3"}
    ]

    let gameState = false;

    bot.on("callback_query", async (msg) => {
        const data = msg.data;
        const chatId = msg.message.chat.id;

        if (msg.data === 'info') { 
            gameState = false;
            return bot.sendMessage(
                chatId,
                `–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç ${
                    msg.from.first_name ? msg.from.first_name : ""
                } ${msg.from.last_name ? msg.from.last_name : ""}?`
            );
        }

        if (msg.data === 'top') { 
            gameState = false;
            return bot.sendMessage(
                chatId,
                `–¢–æ–ø 3 –∫–Ω–∏–≥–∏ –¥–Ω—è:\n1) –ú–µ—Ç—Ä–æ 2033\n2) –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä\n2)–î—é–Ω–∞`
            );
        }

        if (msg.data === 'FaQ') { 
            gameState = false;
            return bot.sendMessage(
                chatId,
                `–≠—Ç–æ –º–µ–Ω—é FaQ - —Ç—É—Ç –Ω–∞—Ö–æ–¥—è—Ç—Å—è —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã.`,
                {reply_markup: {
                    inline_keyboard: faqKeyboard
                  }}
            );
        }

        if (msg.data === 'start') { 
            gameState = false;
            return bot.sendMessage(
                chatId,
                `–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:`, {reply_markup: {
                    inline_keyboard: mainKeyboard
                  }}
            );
        }

        if ((msg.data).includes("faq_")) { 
            for(let i=0, len=answers.length; i < len; i++){
                if( answers[i].name === msg.data){
                    return bot.sendMessage(
                        chatId,
                        answers[i].answer,
                    );
                }
            }
        }

        if (data === "/again") {
            if (counter == answerStore.length - 1) {
                counter = 1;
            } else {
                counter++;
            }

            return startGame(chatId);
        }

        if(gameState == true){
            if (data == chats[chatId]) {
                receivingSticker(
                    chatId,
                    "https://cdn.tlgrm.ru/stickers/c62/4a8/c624a88d-1fe3-403a-b41a-3cdb9bf05b8a/256/1.webp"
                ).then((res) => {
                    return bot.sendMessage(
                        chatId,
                        `–£—Ä–∞–∞–∞!!! –¢—ã –æ—Ç–≥–∞–¥–∞–ª —Ü–∏—Ñ—Ä—É. –ö—Ä–∞—Å–∞–≤—á–∏–∫ üëç`,
                        againOptions
                    );
                });
            } else {
                receivingSticker(
                    chatId,
                    "https://cdn.tlgrm.ru/stickers/c62/4a8/c624a88d-1fe3-403a-b41a-3cdb9bf05b8a/256/6.webp"
                ).then((res) => {
                    return bot.sendMessage(
                        chatId,
                        `–ù–µ—Ç, –Ω–µ –≤–µ—Ä–Ω–æ. –¶–∏—Ñ—Ä–∞ ${data} –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç. –°—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑ üòä`
                    );
                });
            }
        }

        

        if (msg.data === 'game') { 
            gameState = true;
            startGame(chatId);
            console.log(
                "counter = ",
                counter,
                " / answerStore.length = ",
                answerStore.length
            );

            
        }
    });
};
